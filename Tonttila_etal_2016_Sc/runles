#!/bin/sh

###############################################################
## This jobscript is written for the FMI's Cray XC30 system. 
## Job submission is done at the end of the script. It can do 
## both sequential or parallel runs by adjusting the value 
## IsSeq below. For running on simple linux workstation, set 
## IsSeq=1 and simply run ./runles.
##
## Note: For cluster runs, you most likely need to adjust the
## generation of the file job.sh and the job submission command
## to your local system specifications. 
###############################################################

# -------------------------------------------------- <USER SPECIFIED INFORMATION>
IsSeq=0 # 0 for mpi runs, 1 for sequential

EXPNAME="DYCOMSIIRF02"  # Name of the experiment

NPROCS=144          # Number of processors (for IsSeq==0)
TWALL=40:00:00      # Required wallclock time for batch system

NXP=100             # Number of points in X-direction (including "halo" points)
NYP=100             # Number of points in Y-direction (including "halo" points)
NZP=80              # Number of points in Z-direction
DX=50.              # Resolution in X-direction (meters)
DY=50.              # Resolution in Y-direction (meters)
DZ=20.              # Resolution in Z-direction (meters)
DT=1.               # (max) Timestep length (seconds)
Tspinup=3600.       # Length of the spinup period (seconds)
Texp=43200.         # Length of the experiment (seconds)
LEVEL=4             # Thermodynamic level ( 1-3 for bulk microphysics, 4- for SALSA )
# -------------------------------------------------- </USER SPECIFIED INFORMATION>


# --------------------------------------------------------------- <DO NOT CHANGE>
# Get the current version from GIT (if used - this functionality 
# is not available otherwise and a default value is used)
command -v git 2>&1 >/dev/null
if [ $? -eq 0 ]; then
    ver=`git describe --tags 2>&1`
    if [ $? -ne 0 ]; then
	echo "Ignore possible error, git just doesn't find a version tag - using default value"
	ver=vx.x.x
    fi
else
    ver=latest
fi
# ---------------------------------------------------------------- </DO NOT CHANGE>


# Create namelists
cat > NAMELIST <<EOF
 &version
  ver="${ver}"
 /

 &model
  nxp =   ${NXP}
  nyp =   ${NYP}
  nzp =   ${NZP}
  deltax = ${DX}
  deltay = ${DY}
  deltaz = ${DZ}
  nxpart = .true.
  dzmax  = 1500.
  dzrat  = 1.0
  dtlong = ${DT}
  distim = 100.
  timmax = ${Texp}
  Tspinup = ${Tspinup}
  runtype = "INITIAL"
  level = ${LEVEL}
  CCN = 50.e6
  prndtl = -0.3333333
  filprf = '${EXPNAME}'
  hfilin = '${EXPNAME}.h.rst'
  ssam_intvl = 120.
  savg_intvl = 120.
  mcflg = .FALSE.
  lbinanl = .FALSE.
  frqanl = 600.
  corflg = .false.
  itsflg = 1
  strtim = 180.0
  sed_aero = .FALSE.
  sed_cloud = .FALSE.
  sed_precp = .TRUE.
  sed_ice = .TRUE.
  sed_snow = .TRUE.
  iradtyp = 3            
  case_name = 'default'   
  div = 3.75e-6             
  sfc_albedo = 0.05
  radsounding = 'datafiles/dsrt.lay'
  dthcon = 16.
  drtcon = 93.
  ubmin  = -0.25
  zrough = 0.01
  th00 = 289.
  umean =  0.1
  vmean = -0.1
 /

 &salsa	
   nlcoag = .TRUE.       ! Master coagulation switch
   nlcgcc = .TRUE.       ! Self-collection of cloud droplets
   nlcgpp = .TRUE.       ! Self-collection of rain drops
   nlcgpc = .TRUE.       ! Rain collection of cloud droplets
   nlcgaa = .FALSE.      ! Aerosol coagulation
   nlcgca = .TRUE.       ! Cloud collection of aerosols
   nlcgpa = .TRUE.       ! Rain collection of aerosols
   nlcgia = .TRUE.       ! Ice collection of aerosols
   nlcgic = .TRUE.       ! Ice collection of cloud droplets
   nlcgii = .TRUE.       ! Self-collection of ice
   nlcgip = .TRUE.       ! Ice collection of rain drops
   nlcgsa = .TRUE.       ! Snow collection of aerosols
   nlcgsc = .TRUE.       ! Snow collection of cloud droplets
   nlcgsi = .TRUE.       ! Snow collection of ice particles
   nlcgsp = .TRUE.       ! Snow collection of rain drops
   nlcgss = .TRUE.       ! Self-collection of snow

   nlcnd       = .TRUE.  ! Master condensation switch
   nlcndgas    = .TRUE.  ! --Aerosol precursor gas codensation
   nlcndh2oae  = .TRUE.  ! --Condensation of water on aerosols (if FALSE, equilibrium assumed)
   nlcndh2ocl  = .TRUE.  ! --Condensation of water on cloud droplets (and drizzle)
   nlcndh2oic  = .TRUE.  ! --Condensation of water on ice particles
   nlauto      = .TRUE.  ! Master autoconversion switch
   nlautosnow  = .FALSE. ! Master snow autoconversion switch
   nlactiv     = .TRUE.  ! Master cloud activation switch
   nlactbase   = .FALSE.  ! --Switch for parameterized cloud base activation
   nlactintst  = .TRUE.  ! --Switch for interstitial activation based on host model Smax

   nlichom     = .FALSE.     ! Switch for homogeneous ice nucleation
   nlichet     = .FALSE.     ! Switch for heterogeneous ice nucleation
   nlicimmers  = .FALSE.   ! Switch for ice nucleation by immersion
   nlicmelt    = .FALSE.    ! Switch for ice'n' snow melting

   rhlim = 1.2          ! RH limit for SALSA during initialization and spinup

   isdtyp = 0
   nspec = 1
   listspec = 'SO4','','','','','',''
   volDistA = 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0   
   volDistB = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
   nf2a = 1.0

   sigmag = 1.2, 1.7, 2.0, 2.0, 2.0, 2.0, 2.0  ! Stdev for initial aerosol size distribution for isdtyp == 0 (uniform)  
   dpg = 0.022, 0.12, 0.2, 0.2, 0.2, 0.2, 0.2   ! Mode mean diameters in micrometers
   n = 125., 65., 0., 0., 0., 0., 0.         ! Mode number concentrations in #/cm^3
 /

EOF

if [ $IsSeq -eq 0 ]; then

# The stuff below depends entirely on your system specifics #
cat > job.sh <<EOF
#! /bin/sh
#PBS -N ${EXPNAME}
#PBS -l mppwidth=${NPROCS}
#PBS -l mppnppn=20
#PBS -l walltime=${TWALL}

export MPICH_ENV_DISPLAY=1
cd \$PBS_O_WORKDIR

aprun -n ${NPROCS} les.mpi | tee uclales-salsa.output

set -ex

EOF

qsub job.sh

elif [ $IsSeq -eq 1 ]; then
    ./les.seq
fi
